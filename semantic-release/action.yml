name: Semantic Release
description: Deploy using semantic-release
inputs:
  DRY_RUN:
    description: Runs semantic-release with the "--dry-run" flag to simulate a release but not actually do one
    default: false
  GITHUB_TOKEN:
    description: Token to use to update version in 'package.json' and create GitHub release
    required: true
  NPM:
    description: Whether or not to release as an NPM package
    default: false
  NPM_TOKEN:
    description: Token to publish to NPM
outputs:
  RELEASE:
    description: Whether or not a release occurred
    value: ${{ steps.semantic-release.outputs.release }}
  VERSION:
    description: Version of the new release
    value: ${{ steps.semantic-release.outputs.version }}
runs:
  using: composite
  steps:
    - name: Installing semantic-release
      run: |
        if [ ${{ !contains(github.event.head_commit.message, 'skip ci') }} == true ]; then
          echo "Installing semantic-release..."
          npm install semantic-release@17 @semantic-release/git@9 --no-save
        fi
      shell: bash
    - name: Create semantic-release configuration
      run: |
        if [ ${{ !contains(github.event.head_commit.message, 'skip ci') }} == true ]; then
          echo "Creating semantic-relase configuration (NPM: ${{ inputs.NPM }})..."
          ${{ github.action_path }}/create-config.sh
        fi
      env:
        FILE_PATH: ${{ github.workspace }}/.releaserc.yml
        NPM: ${{ inputs.NPM }}
      shell: bash
    - name: Running semantic-release
      id: semantic-release
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ inputs.NPM_TOKEN }}
      run: |
        echo "::set-output name=release::false"
        echo "::set-output name=version::"
        if [ ${{ contains(github.event.head_commit.message, 'skip ci') }} == true ]; then
          echo "[skip ci] detected so skipping release"
          exit 0;
        fi
        if [ ${{ inputs.DRY_RUN }} == true ]; then
          echo "Running semantic-release (dry run)..."
          npx semantic-release --dry-run
        else
          OLD_VERSION=$(node -p -e "require('./package.json').version")
          echo "Running semantic-release..."
          npx semantic-release
          NEW_VERSION=$(node -p -e "require('./package.json').version")
          if [ "$OLD_VERSION" == "$NEW_VERSION" ]; then
            echo "::set-output name=release::false"
          else 
            echo "::set-output name=release::true"
            echo "::set-output name=version::$(echo $NEW_VERSION)"
          fi
        fi
      shell: bash
