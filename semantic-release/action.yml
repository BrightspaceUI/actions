name: Semantic Release
description: Deploy using semantic-release
inputs:
  aws-access-key-id:
    description: Access key id for the role that will read release info, required for MINOR_RELEASE_WITH_LMS
  aws-secret-access-key:
    description: Access key secret for the role that will read release info, required for MINOR_RELEASE_WITH_LMS
  aws-session-token:
    description: Session token for the role that will read release info, required for MINOR_RELEASE_WITH_LMS
  DEFAULT_BRANCH:
    description: name of the default release branch
    default: main
  DRY_RUN:
    description: Runs semantic-release with the "--dry-run" flag to simulate a release but not actually do one
    default: false
  GITHUB_TOKEN:
    description: Token to use to update version in 'package.json' and create GitHub release
    required: true
  MINOR_RELEASE_WITH_LMS:
    description: Automatically perform a minor release whenever the LMS release changes
    default: false
  NPM:
    description: Whether or not to release as an NPM package
    default: false
  NPM_TOKEN:
    description: Token to publish to NPM (not required for CodeArtifact)
outputs:
  VERSION:
    description: Version of the new release
    value: ${{ steps.semantic-release.outputs.version }}
runs:
  using: composite
  steps:
    - name: Installing semantic-release
      run: |
        echo "Installing semantic-release..."
        npm install semantic-release@19 @semantic-release/git@10 --no-save
      shell: bash
    - name: Get maintenance version
      uses: BrightspaceUI/actions/get-maintenance-version@main
      id: get-maintenance-version
    - name: Get Repo's Last LMS Release
      if: ${{ inputs.MINOR_RELEASE_WITH_LMS == 'true' && steps.get-maintenance-version.outputs.IS_MAINTENANCE_BRANCH != 'true' }}
      id: repo-lms-version
      run: echo "value=$(cat .lmsrelease)" >> $GITHUB_OUTPUT
      shell: bash
    - name: Get Active LMS Release
      if: ${{ inputs.MINOR_RELEASE_WITH_LMS == 'true' && steps.get-maintenance-version.outputs.IS_MAINTENANCE_BRANCH != 'true' }}
      id: get-lms-version
      uses: Brightspace/lms-version-actions/get-lms-release@main
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-session-token: ${{ inputs.aws-session-token }}
    - name: Update Repo's Last LMS Release
      if: ${{ inputs.MINOR_RELEASE_WITH_LMS == 'true' && steps.get-maintenance-version.outputs.IS_MAINTENANCE_BRANCH != 'true' && inputs.DRY_RUN == 'false' && steps.repo-lms-version.outputs.VALUE != steps.get-lms-version.outputs.LMS_VERSION }}
      run: |
        echo "Updating last LMS release..."
        echo "${{ steps.get-lms-version.outputs.LMS_VERSION }}" > .lmsrelease
        git config user.name github-actions[bot]
        git config user.email 41898282+github-actions[bot]@users.noreply.github.com
        git add .lmsrelease
        git commit -m "feat: updating tracked LMS release version [skip ci]"
        git push --follow-tags --repo=https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      shell: bash
    - name: Create semantic-release configuration
      run: |
        echo "Creating semantic-release configuration (DEFAULT_BRANCH: ${{ inputs.DEFAULT_BRANCH }} , NPM: ${{ inputs.NPM }})..."
        ${{ github.action_path }}/create-config.sh
      env:
        DEFAULT_BRANCH: ${{ inputs.DEFAULT_BRANCH }}
        FILE_PATH: ${{ github.workspace }}/.releaserc.json
        NPM: ${{ inputs.NPM }}
      shell: bash
    - name: Running semantic-release
      id: semantic-release
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ inputs.NPM_TOKEN }}
      run: |
        echo "version=" >> $GITHUB_OUTPUT
        if [ ${{ inputs.DRY_RUN }} == true ]; then
          echo "Running semantic-release (dry run)..."
          npx semantic-release --dry-run
        else
          OLD_VERSION=$(node -p -e "require('./package.json').version")
          echo "Running semantic-release..."
          npx semantic-release
          NEW_VERSION=$(node -p -e "require('./package.json').version")
          if [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi
        fi
      shell: bash
